#!/usr/bin/perl -w
use strict;
use Cwd 'abs_path';
use File::Copy qw(copy);

## Copyright notice
## Copyright 2015 Markus Haas

## Statement of copying permission
## This file is part of genexpro4ceq8800.
## 
##     genexpro4ceq8800 is free software: you can redistribute it and/or modify
##     it under the terms of the GNU General Public License as published by
##     the Free Software Foundation, either version 3 of the License, or
##     (at your option) any later version.
## 
##     genexpro4ceq8800 is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU General Public License for more details.
## 
##     You should have received a copy of the GNU General Public License
##     along with genexpro4ceq8800. If not, see <http://www.gnu.org/licenses/>.

## Get installation path
my $genexpro4ceq_base = abs_path($0);
$genexpro4ceq_base =~ s/\/bin\/gep_makestd$//;

## License hint
print "\n\n";
print "    genexpro4ceq8800  Copyright (C) 2015  Markus Haas\n";
print "    This program comes with ABSOLUTELY NO WARRANTY*.\n";
print "    This is free software, and you are welcome to redistribute it\n";
print "    under certain conditions*.\n";
print "    *: See license agreement file $genexpro4ceq_base/gpl-3.0.txt\n\n";
print "    Press enter to continue!\n\n";
<>;

## Necessary files
my $gexpdir = $ENV{"HOME"} . "/.genexpro4ceq8800"; ## "gexp" directory

if ( ! -d $gexpdir ) { ## Create, if not exist
  mkdir $gexpdir;
}

my $gexpfragtemplatefile = $genexpro4ceq_base . "/analysis/frags2detect.csv"; ## Template file with fragments to detect
my $analysisparametertemplatefile = $genexpro4ceq_base . "/analysis/analysisparameter"; ## Template file with the analysis parameters to use
my $targetfragfile = $ENV{"HOME"} . "/.genexpro4ceq8800/frags2detect.csv"; ## User file with fragments to detect
my $analysisparameterfile = $ENV{"HOME"} . "/.genexpro4ceq8800/analysisparameter"; ## User file with the analysis parameters to use

if ( ! -f $targetfragfile ) {
  copy $gexpfragtemplatefile, $targetfragfile; ## Copy fragmentelist from template file if user file does not exist
}

if ( ! -f $analysisparameterfile ) {
  copy $analysisparametertemplatefile, $analysisparameterfile; ## Copy from analysis parameter template file if user file does not exist
}

my $rnaamountfile = "amount.csv"; ## File which contains m(RNA) and Ceq-ID
my $outfile = "standardvalues"; ## File for the output

## Read analysis parameter from file
my %pars; ## Hash for the analysis parameters
open (FH, "< $analysisparameterfile") or die "Can't open $analysisparameterfile for read: $!"; ## Load file with the analysis parameters
while (<FH>) {
  if ($_ =~ m/[^#]/){ ## Ignore comment lines beginning with "#"
    $_ =~ s/\n//; ## Delete line break
    (my $name, my $value) = split(/\t/, $_); ## Write parameters in hash
    $pars{$name} = $value;
  }
}
close FH or die "Cannot close $analysisparameterfile: $!";
   
## Read all ceqfrag files in the current directory
my $dir = '.';
my @files;
opendir(DIR, $dir) or die $!;
while (my $file = readdir(DIR)) {
  # We only want files
  next unless (-f "$dir/$file");
  # Use a regular expression to find files ending in .ceqfrag
  next unless ($file =~ m/\.ceqfrag$/);
  push (@files, $file);
}
closedir(DIR);

## Open file with fragments to detect and read ids and default length in an array, respectively
open (FH, "< $targetfragfile") or die "Can't open $targetfragfile for read: $!";
my @targetfrags; ## Array for the targetfragments
while (<FH>) {
  if ($_ =~ m/^[0-9]/){
    $_ =~ s/\n//g;
    push (@targetfrags, $_);
  }
}
close FH or die "Cannot close $targetfragfile: $!";

## Open ceqfrag Files, take D4 labelled fragments and read length, peak height and peak area in a hash, respectively
my @d4fragsnpa = (); ## Hash containing ceqid, length, pa and npa of all d4 labelled fragments

foreach my $fafile (@files) {
  my $ceqid = $fafile; ## Ceq-ID = Filename
  $ceqid =~ s/^([^\/]+)\..+$/$1/; ## Remove extension to get Ceq-ID

  open (FH, "< $fafile") or die "Can't open $fafile for read: $!";
  my @d4frags = (); ## Array for the detected fragments
  my @d4fragsinrange = (); ## Array for all d4 labelled fragments in the range of a target fragment
  my @row;
  while (<FH>) {
    if ($_ =~ m/\tD4\t/){
      @row = split /\t/, $_;
      foreach my $counter (0..$#targetfrags) {  ## Check for each targetfragment if d4 labelled fragment matches
	my @row2 = split /\t/, $targetfrags[$counter];
	if (($row[5] > ($row2[1] - $pars{'range'})) && ($row[5] < ($row2[1] + $pars{'range'}))) { ## Take only fragments in range
	  push (@d4fragsinrange, "$row2[0]\t$ceqid\t$row[5]\t$row[7]"); ## Push these to an array
	}
      }
    }
  }
  if (grep(/^0/, @d4fragsinrange)) { ## Only continue if reference fragment could be detected
    foreach my $counter (0..$#targetfrags) { ## Check for all target fragments
      my @row3 = split /\t/, $targetfrags[$counter];
      if (grep(/^$row3[0]\t/, @d4fragsinrange)) { ## If the target fragment was detected
	my @d4fragspec = grep (/^$row3[0]\t/, @d4fragsinrange);
	my @d4fragspecsort = sort { (split '\t', $b)[3] <=> (split '\t', $a)[3] } @d4fragspec; ## Take only that fragment with the highest peak area
	push (@d4frags, $d4fragspecsort[0]); ## Push that fragment to an array
      }
    }
    my @d4reffrag = grep (/^0\t/, @d4frags); ## Get the reference fragment
    foreach (@d4frags) {
      $_ = $_."\t".((split '\t', $_)[3] / (split '\t', $d4reffrag[0])[3]); ## Calculate the normalised peak area
      push (@d4fragsnpa, $_); ## Add the values to a array
    }
  }
  close FH or die "Cannot close $fafile: $!";
}

## Open file with the rna amounts
my @rnaamount; ## Array with the m(RNA) and the corresponding ceq id
open (FH, "< $rnaamountfile") or die "Can't open $rnaamountfile for read: $!";
while (<FH>) {
  chomp;
  if ( !($_ =~ m/^#/) && ( $_ =~ m/[^\t]+\t[0-9\.]+$/) ){
    push (@rnaamount, $_); ## Read data from file
  }
}
close FH or die "Cannot close $rnaamountfile: $!";

## Regression
my @standardvalues = (); ## Array for the standard values
my $sumslope = 0; ## Variable to sum up the slopes

foreach (@targetfrags) {
  my $frag = (split '\t', $_)[0]; ## Calculate regression for each targetfragment
  if ($frag > 0) { ## Do not calculate the reference fragment (which is fragment no 0)
    my @isofrags = grep (/^$frag\t/, @d4fragsnpa); ## Take all values of the current fragment
    if ((scalar @isofrags) > 1) { ## Only continue if there are at least two values
      my $sumlognpa = 0;
      my $sumlogmrna = 0;
      my @logvals = (); ## Array for the log values
      foreach (@isofrags) {
	my $ceqid = (split '\t', $_)[1]; 
	if (grep(/^$ceqid\t/, @rnaamount)) { ## Only continue if there is a m(RNA) corresponding to the ceq id
	  my @rnafrag = grep (/^$ceqid\t/, @rnaamount); ## Take the m(RNA) to the corresponding ceq id
	  if ((scalar @rnafrag) == 1) { ## Only continue if only one m(RNA) matches
	    $sumlognpa = $sumlognpa + (log((split '\t', $_)[4])/log(10)); ## Sum up the logs of npa
	    $sumlogmrna = $sumlogmrna + (log((split '\t', $rnafrag[0])[1])/log(10)); ## Sum up the logs of m(RNA)
	    push (@logvals, log((split '\t', $_)[4])/log(10)."\t".log((split '\t', $rnafrag[0])[1])/log(10)); ## Push the logs of m(RNA) and npa to an array
	  }
	}
      }
      my $avlognpa = $sumlognpa / (scalar @logvals); ## Calculate average of the log npa values
      my $avlogmrna = $sumlogmrna / (scalar @logvals); ## Calculte average of the log m(RNA) values
      my $sum1 = 0; ## Sum for linear regression calculation
      my $sum2 = 0; ## Another sum for the linear regression calculation
      foreach (@logvals) {
	$sum1 = $sum1 + (((split '\t', $_)[1] - $avlogmrna) * ((split '\t', $_)[0] - $avlognpa));
	$sum2 = $sum2 + (((split '\t', $_)[1] - $avlogmrna)**2);
      }
      my $slope = $sum1 / $sum2; ## Slope of the linear regression
      my $yic = $avlognpa - ($slope * $avlogmrna); ## Y-intercept for the linear regression
      $sumslope = $sumslope + $slope; ## Sum up the slope values
      push (@standardvalues, $frag."\t".$slope."\t".$yic."\t".$avlognpa."\t".$avlogmrna); ## Add the values to an array
    }
  }
}

## Recalculate the y intercept now with the average slope and write to file
my $avslope = $sumslope / scalar @standardvalues; ## Calculate the average slope

open (OUTPUT, ">$outfile"); ## Output to file

print OUTPUT "#FRAGID\tSLOPE\tAVSLOPE\tYIC\tYIC_AVSLOPE\n"; ## Header
foreach (@standardvalues) {
  my @row = split /\t/, $_;
  my $yicnew = $row[3] - ($avslope * $row[4]); ## Calculate the new y-intercept based on the average slope
  print OUTPUT "$row[0]\t";
  printf OUTPUT ('%.8f', $row[1]);
  print OUTPUT "\t";
  printf OUTPUT ('%.8f', $avslope);
  print OUTPUT "\t";
  printf OUTPUT ('%.8f', $row[2]);
  print OUTPUT "\t";
  printf OUTPUT ('%.8f', $yicnew);
  print OUTPUT "\n";
}

close (OUTPUT);

