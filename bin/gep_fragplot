#!/usr/bin/perl -w
use strict;
use Cwd 'abs_path';
use List::Util qw(first);
use File::Copy qw(copy);

## Copyright notice
## Copyright 2015 - 2017 Markus Haas

## Statement of copying permission
## This file is part of genexpro4ceq8800.
## 
##     genexpro4ceq8800 is free software: you can redistribute it and/or modify
##     it under the terms of the GNU General Public License as published by
##     the Free Software Foundation, either version 3 of the License, or
##     (at your option) any later version.
## 
##     genexpro4ceq8800 is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU General Public License for more details.
## 
##     You should have received a copy of the GNU General Public License
##     along with genexpro4ceq8800. If not, see <http://www.gnu.org/licenses/>.

## Arrays to store the d4 and std frags, respectively
my @d4frags;
my @stdfrags;

## Get installation path
my $genexpro4ceq_base = abs_path($0);
$genexpro4ceq_base =~ s/\/bin\/gep_fragplot$//;

## Open file given as first parameter to this programm
open (FH, "< $ARGV[0]") or die "Can't open $ARGV[0] for read: $!";
while (<FH>) {
  $_ =~ s/ //g;
  if ($_ =~ m/D4/) {
    my @row = split /\t/, $_;
    push (@d4frags, "$row[5]\t$row[7]");
  }
  if ($_ =~ m/\*/) {
    my @row = split /\t/, $_;
    push (@stdfrags, "$row[4]\t$row[7]");
  }
}
close FH or die "Cannot close $ARGV[0]: $!";

## Necessary files
my $gexpdir = $ENV{"HOME"} . "/.genexpro4ceq8800"; ## "expressprofiling" directory

if ( ! -d $gexpdir ) { ## Create, if not exist
  mkdir $gexpdir;
}

my $gexpfragtemplatefile = $genexpro4ceq_base . "/analysis/frags2detect.csv"; ## Template file with fragments to detect
my $analysisparametertemplatefile = $genexpro4ceq_base . "/analysis/analysisparameter"; ## Template file with the analysis parameters to use
my $targetfragfile = $ENV{"HOME"} . "/.genexpro4ceq8800/frags2detect.csv"; ## User file with fragments to detect
my $analysisparameterfile = $ENV{"HOME"} . "/.genexpro4ceq8800/analysisparameter"; ## User file with the analysis parameters to use

if ( ! -f $targetfragfile ) {
  copy $gexpfragtemplatefile, $targetfragfile; ## Copy fragmentelist from template file if user file does not exist
}

if ( ! -f $analysisparameterfile ) {
  copy $analysisparametertemplatefile, $analysisparameterfile; ## Copy from analysis parameter template file if user file does not exist
}

my $rnaamountfile = "amount.csv"; ## File which contains m(RNA) and Ceq-ID
my $outfile = "standardvalues"; ## File for the output

## Read analysis parameter from file
my %pars; ## Hash for the analysis parameters
open (FH, "< $analysisparameterfile") or die "Can't open $analysisparameterfile for read: $!"; ## Load file with the analysis parameters
while (<FH>) {
  if ($_ =~ m/[^#]/){ ## Ignore comment lines beginning with "#"
    $_ =~ s/\n//; ## Delete line break
    (my $name, my $value) = split(/\t/, $_); ## Write parameters in hash
    $pars{$name} = $value;
  }
}
close FH or die "Cannot close $analysisparameterfile: $!";

my @sollfrags;
my $reffrag;
## Open file with fragments to detect and read ids and default length in an array, respectively
open (FH, "< $targetfragfile") or die "Can't open $targetfragfile for read: $!";
my @targetfrags; ## Array for the targetfragments
while (<FH>) {
  $_ =~ s/\n//g;
  if ($_ =~ m/^0\t/) {
    my @row = split /\t/, $_;
    $reffrag = $row[1];
  } elsif ($_ =~ m/^[1-9][0-9]*\t/) {
    my @row = split /\t/, $_;
    push (@sollfrags, $row[1]);
  }
}
close FH or die "Cannot close $targetfragfile: $!";

## Get the CEQ8800 ID
my $title = $ARGV[0]; $title =~ s/^.*\/([^\/]+)$/$1/; $title =~ s/(.*)\.[^\.]+$/$1/;

## Print result to gnuplot
open(GNUPLOT, "| gnuplot") or die("cat failed\n");
print GNUPLOT "reset\n";
print GNUPLOT "if (strstrt(GPVAL_TERMINALS, 'qt') > 0) set terminal qt; else set terminal x11 font \"helvetica,12,medium\"\n";
print GNUPLOT "set grid\n";
print GNUPLOT "set title 'D4-Labelled Fragments of CEQ8800 Run ID $title'\n";
print GNUPLOT "set xrange [50:450]\n";
print GNUPLOT "set xlabel  'Size in Nucleotides'\n";
print GNUPLOT "set ylabel  'Peak Area'\n";
print GNUPLOT "set obj rect from ".($reffrag - $pars{'range'}).", graph 0 to ".($reffrag + $pars{'range'}).", graph 1 fc rgb \"#ffbbbb\" fs noborder\n";

foreach (@sollfrags) {
print GNUPLOT "set obj rect from ".($_ - $pars{'range'}).", graph 0 to ".($_ + $pars{'range'}).", graph 1 fc rgb \"#bbbbbb\" fs noborder\n";
}

print GNUPLOT "plot \\\n";
print GNUPLOT "'-' using 1:2 with impulses lw 3 lc rgb \"#ff0000\" title 'Size Standard', \\\n";
print GNUPLOT "'-' using 1:2 with impulses lw 3 lc rgb \"#0000ff\" title 'D4 Labelled', \\\n";
print GNUPLOT "NaN with impulses lw 6 lc rgb \"#ffbbbb\" title 'Size Range of Reference Fragment', \\\n";
print GNUPLOT "NaN with impulses lw 6 lc rgb \"#bbbbbb\" title 'Size Range of Expected Fragments'\n";

foreach (@stdfrags) {
  print GNUPLOT "$_\n";
}

print GNUPLOT "e\n";

foreach (@d4frags) {
  print GNUPLOT "$_\n";
}

print GNUPLOT "e\n";
print GNUPLOT "pause mouse close\n";

close (GNUPLOT);

